{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#fitree","title":"FiTree","text":"<p>FiTree is a Python package for Bayesian inference of fitness landscapes via tree-structured branching processes.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fitree\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>FiTree takes tumor mutation trees as input and learns a matrix representing the fitness effects of individual mutations as well as their pairwise interactions. We provide small examples on how to use FiTree:</p> <ol> <li> <p>Pre-processing of tree input</p> </li> <li> <p>Tree generation and inference</p> </li> </ol> <p>For large-scale simulation studies and real data application, we recommend looking into the snakemake workflows.</p>"},{"location":"#preprint","title":"Preprint","text":"<p>The preprint of the paper is provided here. We provide the data and script to reproduce the figures in the paper here.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#fitree","title":"<code>fitree</code>","text":""},{"location":"api/#fitree.FiTreeJointLikelihood","title":"<code>FiTreeJointLikelihood</code>","text":"<p>               Bases: <code>Op</code></p>"},{"location":"api/#fitree.FiTreeJointLikelihood.__init__","title":"<code>__init__(trees, augment_max_level=2, C_s=None, conditioning=True, lifetime_risk_mean=None, lifetime_risk_std=None, eps=1e-64, tau=0.01)</code>","text":"<p>This object computes the joint log-likelihood of the fitness matrix F_mat to be used in the MCMC sampling.</p> <p>Parameters:</p> Name Type Description Default <code>trees</code> <code>TumorTreeCohort</code> <p>TumorTreeCohort object.</p> required <code>augment_max_level</code> <code>int</code> <p>Maximum level of augmentation.</p> <code>2</code> <code>C_s</code> <code>float</code> <p>scaling factor at sampling.</p> <code>None</code> <code>conditioning</code> <code>bool</code> <p>Whether to condition on the observed trees.</p> <code>True</code> <code>lifetime_risk_mean</code> <code>float</code> <p>Mean lifetime risk.</p> <code>None</code> <code>lifetime_risk_std</code> <code>float</code> <p>Standard deviation of lifetime risk.</p> <code>None</code> <code>eps</code> <code>float</code> <p>machine epsilon.</p> <code>1e-64</code> <code>tau</code> <code>float</code> <p>time window for the numerical integration.</p> <code>0.01</code>"},{"location":"api/#fitree.Subclone","title":"<code>Subclone</code>","text":"<p>               Bases: <code>SubcloneBase</code>, <code>NodeMixin</code></p>"},{"location":"api/#fitree.Subclone.__init__","title":"<code>__init__(node_id, mutation_ids, seq_cell_number, cell_number=None, parent=None, children=None, genotype=None, growth_params=None, node_path=None)</code>","text":"<p>A subclone in the tree</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>int</code> <p>node ID</p> required <code>mutation_ids</code> <code>Iterable[int]</code> <p>mutation IDs</p> required <code>seq_cell_number</code> <code>int</code> <p>number of cells in the subclone</p> required <code>cell_number</code> <code>int | None</code> <p>number of cells in the subclone</p> <code>None</code> <code>parent</code> <code>Subclone | None</code> <p>parent subclone</p> <code>None</code> <code>children</code> <code>Iterable[Subclone] | None</code> <p>children subclones</p> <code>None</code> <code>genotype</code> <code>list[int] | None</code> <p>genotype of the subclone</p> <code>None</code> <code>growth_params</code> <code>dict | None</code> <p>growth parameters of the subclone</p> <code>None</code> <code>node_path</code> <code>str | None</code> <p>path of the subclone in the tree</p> <code>None</code>"},{"location":"api/#fitree.Subclone.get_genotype","title":"<code>get_genotype()</code>","text":"<p>Get the genotype of the subclone</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list[int]</code> <p>genotype</p>"},{"location":"api/#fitree.Subclone.get_growth_params","title":"<code>get_growth_params(mu_vec, F_mat, common_beta, return_dict=False)</code>","text":"<p>get growth parameters for the subclone</p> <p>Parameters:</p> Name Type Description Default <code>mu_vec</code> <code>ndarray</code> <p>mutation rate vector</p> required <code>F_mat</code> <code>ndarray</code> <p>fitness matrix</p> required <code>common_beta</code> <code>float</code> <p>common death rate</p> required <code>return_dict</code> <code>bool</code> <p>whether to return a dict or not</p> <code>False</code> <p>None or</p> Name Type Description <code>growth_params</code> <code>dict | Any</code> <p>dict with growth parameters</p> <code>dict | Any</code> <p>{ \"nu\": mutation rate, \"alpha\": birth rate, \"beta\": death rate, \"lam\": net growth rate, \"delta\": running-max net growth rate, \"r\": number of times achieving the running-max net growth rate, \"rho\": shape parameter of the subclonal     population size distribution (nu / alpha), \"phi\": scale parameter of the subclonal population size distribution, \"gamma\": growth ratio</p> <code>dict | Any</code> <p>}</p>"},{"location":"api/#fitree.TumorTree","title":"<code>TumorTree</code>","text":""},{"location":"api/#fitree.TumorTree.__init__","title":"<code>__init__(patient_id, tree_id, root, tumor_size, weight=1.0, sampling_time=None)</code>","text":"<p>A tumor tree</p> <p>Parameters:</p> Name Type Description Default <code>patient_id</code> <code>int</code> <p>patient id</p> required <code>tree_id</code> <code>int</code> <p>tree id</p> required <code>root</code> <code>Subclone</code> <p>root subclone</p> required <code>tumor_size</code> <code>float</code> <p>total number of tumor cells</p> required <code>weight</code> <code>float</code> <p>weight of the tree. Defaults to 1.0.</p> <code>1.0</code> <code>sampling_time</code> <code>float</code> <p>sampling time of the tree. Defaults to None.</p> <code>None</code>"},{"location":"api/#fitree.TumorTree.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the tumor tree</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>string representation of the tumor tree</p>"},{"location":"api/#fitree.TumorTreeCohort","title":"<code>TumorTreeCohort</code>","text":""},{"location":"api/#fitree.TumorTreeCohort.__init__","title":"<code>__init__(name, trees=None, n_mutations=0, N_trees=0, N_patients=0, mu_vec=None, common_beta=None, C_0=None, C_seq=None, C_sampling=None, t_max=None, mutation_labels=None, tree_labels=None, patient_labels=None, lifetime_risk=None)</code>","text":"<p>A cohort of tumor mutation trees</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the cohort</p> required <code>trees</code> <code>list[TumorTree]</code> <p>list of tumor trees.</p> <code>None</code> <code>n_mutations</code> <code>int</code> <p>number of mutations.</p> <code>0</code> <code>N_trees</code> <code>int</code> <p>number of trees.</p> <code>0</code> <code>N_patients</code> <code>int</code> <p>number of patients.</p> <code>0</code> <code>mu_vec</code> <code>ndarray</code> <p>mutation rates.</p> <code>None</code> <code>common_beta</code> <code>float</code> <p>common beta parameter.</p> <code>None</code> <code>C_0</code> <code>(int, float)</code> <p>static wild-type population size.</p> <code>None</code> <code>C_seq</code> <code>(int, float)</code> <p>number of sequenced cells.</p> <code>None</code> <code>C_sampling</code> <code>(int, float)</code> <p>scaling factor for the sampling time.</p> <code>None</code> <code>t_max</code> <code>float</code> <p>maximum time.</p> <code>None</code> <code>mutation_labels</code> <code>list</code> <p>mutation labels.</p> <code>None</code> <code>tree_labels</code> <code>list</code> <p>tree labels.</p> <code>None</code> <code>patient_labels</code> <code>list</code> <p>patient labels.</p> <code>None</code> <code>lifetime_risk</code> <code>float</code> <p>lifetime risk.</p> <code>None</code>"},{"location":"api/#fitree.VectorizedTrees","title":"<code>VectorizedTrees</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>This class stores the trees in a vectorized format</p> <p>Parameters:</p> Name Type Description Default <code>cell_number</code> <p>cell number of each node</p> required <code>seq_cell_number</code> <p>sequenced cell number of each node</p> required <code>observed</code> <p>observed status of each node</p> required <code>sampling_time</code> <p>sampling time of each tree</p> required <code>weight</code> <p>weight of each tree</p> required <code>tumor_size</code> <p>tumor size of each tree</p> required <code>node_id</code> <p>node ID of each node</p> required <code>parent_id</code> <p>parent ID of each node</p> required <code>alpha</code> <p>alpha parameter of each node</p> required <code>nu</code> <p>nu parameter of each node</p> required <code>lam</code> <p>lambda parameter of each node</p> required <code>rho</code> <p>rho parameter of each node</p> required <code>phi</code> <p>phi parameter of each node</p> required <code>delta</code> <p>delta parameter of each node</p> required <code>r</code> <p>r parameter of each node</p> required <code>gamma</code> <p>gamma parameter of each node</p> required <code>genotypes</code> <p>genotype of each node</p> required <code>N_trees</code> <p>number of observed trees</p> required <code>N_patients</code> <p>number of patients</p> required <code>n_nodes</code> <p>number of union nodes (w/o root)</p> required <code>beta</code> <p>common death rate</p> required <code>C_s</code> <p>sampling scale</p> required <code>C_0</code> <p>root size</p> required <code>t_max</code> <p>maximum sampling time</p> required"},{"location":"api/#fitree.compute_normalizing_constant","title":"<code>compute_normalizing_constant(trees, eps=1e-64, tau=0.01)</code>","text":"<p>This function computes the normalizing constant for the joint likelihood of the trees. P(T_s &lt; t_max) = 1 - P(T_s &gt; t_max)</p> <p>Parameters:</p> Name Type Description Default <code>trees</code> <p>VectorizedTrees The tree object.</p> required <code>eps</code> <p>float, optional The machine epsilon. Defaults to 1e-64.</p> <code>1e-64</code> <code>tau</code> <p>float, optional The time window for the numerical integration. Defaults to 1e-2.</p> <code>0.01</code>"},{"location":"api/#fitree.generate_fmat","title":"<code>generate_fmat(rng, n_mutations, mean_diag=0.1, sigma_diag=0.05, mean_offdiag=0.0, sigma_offdiag=1.0, p_diag=0.5, p_offdiag=0.5, positive_ratio=0.5)</code>","text":"<p>Generate a fitness matrix with diagonal and off-diagonal elements.</p> <p>Parameters:</p> Name Type Description Default <code>rng</code> <code>Generator</code> <p>Random number generator.</p> required <code>n_mutations</code> <code>int</code> <p>Number of mutations.</p> required <code>mean_diag</code> <code>float</code> <p>Mean of the diagonal elements.</p> <code>0.1</code> <code>sigma_diag</code> <code>float</code> <p>Standard deviation of the diagonal elements.</p> <code>0.05</code> <code>mean_offdiag</code> <code>float</code> <p>Mean of the off-diagonal elements.</p> <code>0.0</code> <code>sigma_offdiag</code> <code>float</code> <p>Standard deviation of the off-diagonal elements.</p> <code>1.0</code> <code>p_diag</code> <code>float</code> <p>Probability of a diagonal element being non-zero.</p> <code>0.5</code> <code>p_offdiag</code> <code>float</code> <p>Probability of an off-diagonal element being non-zero.</p> <code>0.5</code> <code>positive_ratio</code> <code>float</code> <p>Ratio of positive diagonal elements.</p> <code>0.5</code>"},{"location":"api/#fitree.generate_trees","title":"<code>generate_trees(rng, n_mutations, N_trees, mu_vec, F_mat, common_beta=1.0, C_0=100000.0, C_seq=10000.0, C_sampling=1000000000.0, tau=0.001, t_max=100, rule='parallel', k_repeat=0, k_multiple=1, return_time=True, parallel=False, n_jobs=-1)</code>","text":"<p>Generate a list of trees with the given number of mutations and the given mutation rate vector and fitness matrix.</p> <p>Parameters:</p> Name Type Description Default <code>rng</code> <code>Generator</code> <p>The random number generator.</p> required <code>n_mutations</code> <code>int</code> <p>The number of mutations to be considered.</p> required <code>N_trees</code> <code>int</code> <p>The number of trees to be generated.</p> required <code>mu_vec</code> <code>ndarray</code> <p>The n-by-1 mutation rate vector.</p> required <code>F_mat</code> <code>ndarray</code> <p>The n-by-n fitness matrix.</p> required <code>common_beta</code> <code>float</code> <p>The common death rate.</p> <code>1.0</code> <code>C_0</code> <code>int | float</code> <p>The static wild-type population size.</p> <code>100000.0</code> <code>C_seq</code> <code>int</code> <p>Number of cells to sequence.</p> <code>10000.0</code> <code>C_sampling</code> <code>int | float</code> <p>The number of cells to sample.</p> <code>1000000000.0</code> <code>tau</code> <code>float</code> <p>The step size of the tau-leaping algorithm.</p> <code>0.001</code> <code>t_max</code> <code>float</code> <p>The maximum time to generate the tree.</p> <code>100</code> <code>rule</code> <code>str</code> <p>The type of the tree generation. Currently, only \"parallel\" is supported.</p> <code>'parallel'</code> <code>k_repeat</code> <code>int</code> <p>The maximum number of repeated mutations.</p> <code>0</code> <code>k_multiple</code> <code>int</code> <p>The maximum number of multiple mutations.</p> <code>1</code> <code>return_time</code> <code>bool</code> <p>Whether to return the sampling time or not.</p> <code>True</code> <code>parallel</code> <code>bool</code> <p>Whether to use parallel processing or not.</p> <code>False</code> <code>n_jobs</code> <code>int</code> <p>The number of jobs to run in parallel. If -1, then all available cores are used. Defaults to -1.</p> <code>-1</code>"},{"location":"api/#fitree.load_cohort_from_json","title":"<code>load_cohort_from_json(path)</code>","text":"<p>Load a TumorTreeCohort object from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the JSON file containing the TumorTreeCohort object.</p> required"},{"location":"api/#fitree.load_vectorized_trees_npz","title":"<code>load_vectorized_trees_npz(path)</code>","text":"<p>Load a VectorizedTrees NamedTuple from an .npz file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the .npz file containing the VectorizedTrees object.</p> required"},{"location":"api/#fitree.plot_fmat","title":"<code>plot_fmat(F_mat, mutation_labels=None, to_sort=True, figsize=(8, 6))</code>","text":"<p>This function plots the fitness matrix F.</p> <p>Parameters:</p> Name Type Description Default <code>F_mat</code> <code>ndarray</code> <p>Fitness matrix.</p> required <code>mutation_labels</code> <code>list</code> <p>Mutation labels. Defaults to None.</p> <code>None</code> <code>to_sort</code> <code>bool</code> <p>Whether to sort the rows and columns of the</p> <code>True</code> <code>figsize</code> <code>tuple</code> <p>Figure size. Defaults to (8, 6).</p> <code>(8, 6)</code>"},{"location":"api/#fitree.plot_fmat_posterior","title":"<code>plot_fmat_posterior(F_mat_posterior, true_F_mat=None, mutation_labels=None, figsize=(8, 7))</code>","text":"<p>This function plots the posterior of the fitness matrix F.</p> <p>Parameters:</p> Name Type Description Default <code>F_mat_posterior</code> <code>ndarray</code> <p>Posterior of the fitness matrix.</p> required <code>true_F_mat</code> <code>ndarray</code> <p>True fitness matrix. Defaults to None.</p> <code>None</code> <code>mutation_labels</code> <code>list</code> <p>Mutation labels. Defaults to None.</p> <code>None</code> <code>figsize</code> <code>tuple</code> <p>Figure size. Defaults to (</p> <code>(8, 7)</code>"},{"location":"api/#fitree.plot_tree","title":"<code>plot_tree(cohort, tree_id, filename=None)</code>","text":"<p>This function plots a tree in the cohort.</p> <p>Parameters:</p> Name Type Description Default <code>cohort</code> <code>TumorTreeCohort</code> <p>A cohort of tumor mutation trees.</p> required <code>tree_id</code> <code>int</code> <p>Tree ID.</p> required <code>filename</code> <code>str</code> <p>Filename to save the plot. Defaults to None.</p> <code>None</code>"},{"location":"api/#fitree.prior_fitree","title":"<code>prior_fitree(trees, diag_mean=0.0, diag_sigma=0.1, offdiag_mean=0.0, offdiag_sigma=0.1, min_occurrences=0, augment_max_level=2)</code>","text":"<p>Construct a prior model for the fitness matrix F.</p> <p>Parameters:</p> Name Type Description Default <code>trees</code> <code>TumorTreeCohort</code> <p>TumorTreeCohort object.</p> required <code>diag_mean</code> <code>float</code> <p>Mean of the normal prior for the diagonal entries.</p> <code>0.0</code> <code>diag_sigma</code> <code>float</code> <p>Standard deviation of the normal prior for the diagonal entries.</p> <code>0.1</code> <code>offdiag_mean</code> <code>float</code> <p>Mean of the normal prior for the off-diagonal entries.</p> <code>0.0</code> <code>offdiag_sigma</code> <code>float</code> <p>Standard deviation of the normal prior for the</p> <code>0.1</code> <code>min_occurrences</code> <code>int</code> <p>Minimum number of occurrences for a mutation</p> <code>0</code> <code>augment_max_level</code> <code>int</code> <p>Maximum level of augmentation for the trees.</p> <code>2</code> <p>Returns:</p> Name Type Description <code>model</code> <code>Model</code> <p>PyMC model for the fitness matrix F.</p>"},{"location":"api/#fitree.save_cohort_to_json","title":"<code>save_cohort_to_json(cohort, path)</code>","text":"<p>Save a TumorTreeCohort object to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>cohort</code> <code>TumorTreeCohort</code> <p>TumorTreeCohort object to be saved.</p> required <code>path</code> <code>str</code> <p>Path to the JSON file where the cohort will be saved.</p> required"},{"location":"api/#fitree.save_vectorized_trees_npz","title":"<code>save_vectorized_trees_npz(vectorized_trees, path)</code>","text":"<p>Save VectorizedTrees NamedTuple to a compressed .npz file.</p> <p>Parameters:</p> Name Type Description Default <code>vectorized_trees</code> <code>VectorizedTrees</code> <p>VectorizedTrees NamedTuple to be saved.</p> required <code>path</code> <code>str</code> <p>Path to the .npz file where the object will be saved.</p> required"},{"location":"api/#fitree.update_params","title":"<code>update_params(trees, F_mat, zero_window=0.01)</code>","text":"<p>This function updates the growth parameters of the tree based on the fitness matrix.</p> <p>Parameters:</p> Name Type Description Default <code>trees</code> <p>VectorizedTrees The tree object.</p> required <code>F_mat</code> <p>jnp.ndarray The fitness matrix.</p> required <code>zero_window</code> <p>float, optional The zero window for numerical stability. Defaults to 1e-2.</p> <code>0.01</code>"},{"location":"api/#fitree.wrap_trees","title":"<code>wrap_trees(trees, augment_max_level=None)</code>","text":"<p>This function takes a TumorTreeCohort object as input and returns a VectorizedTrees object.</p> <p>Parameters:</p> Name Type Description Default <code>trees</code> <code>TumorTreeCohort</code> <p>a cohort of tumor trees</p> required <code>augment_max_level</code> <code>int</code> <p>maximum level for augmentation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[VectorizedTrees, TumorTree]</code> <p>tumor tree cohort in vectorized format and the union tree</p>"}]}