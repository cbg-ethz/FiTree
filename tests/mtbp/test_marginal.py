# import mpmath as mp
from mpmath import *

mp.dps = 25

from fitree._trees import Subclone
from fitree._mtbp import _mcdf


tol = 1e-10
C_0 = 1e5
beta = 8.8
t = 60


def test_mcdf_1():
    # case 1: lambda_1 = 0, lambda_2 > 0

    root = Subclone(node_id=0, mutation_ids=[0, 1], cell_number=100)
    v1 = Subclone(node_id=1, mutation_ids=[2], cell_number=50, parent=root)
    v2 = Subclone(node_id=2, mutation_ids=[3], cell_number=50, parent=v1)

    root.get_growth_params(None, None, beta)

    v1.growth_params = {
        "nu": 3.1 / C_0,
        "alpha": beta,
        "beta": beta,
        "lam": 0,
        "delta": 0,
        "r": 2,
        "rho": 3.1 / C_0 / beta,
        "phi": beta,
        "gamma": 0,
    }

    v2.growth_params = {
        "nu": 1e-5,
        "alpha": 9.2,
        "beta": beta,
        "lam": 9.2 - beta,
        "delta": 9.2 - beta,
        "r": 1,
        "rho": 1e-5 / 9.2,
        "phi": 9.2 / (9.2 - beta),
        "gamma": 0,
    }

    expected_output = [
        0.00296105481930962573679264846772817142200468794895707272472828500876831104041511578068343321459626535,
        0.002711784462836684232322813249328352780312706814478932160655950884287557685966659465298998096395924892,
        0.00247333554425904403688922995001807192554192076718485239695277749656116458776251761091313801867771381,
        0.002245738153051455529192524419274661796295427514417637428381628030942727128038696986125711034338324306,
        0.002029021058437020390179188908386982525427099981665687150081521096828870405380177539699957493240717131,
        0.001823211698938432271265432546906182321111344639670767946674748299909969110159750768060498606664339627,
        0.001628336172386190135422684788135976661163271176656990067806560881015219374653057844183913702366410692,
        0.001444419226387936699336604241680821534413108766735586401257059673381761031964851493378053146738871722,
        0.001271484249256174785096425737075375225657779251692207397476589296434784068942658254064028647777949521,
        0.001109553261370454410688038383269639164584475987319134499359364729306488118820845885754926262303878567,
        0.0009586469068838665980618553662676085444699042802585369741382430219081650317117508803269073233673074933,
        0.000818784445474775041446574239790825466289835394707530584289378591388402535445520416322547156964034739,
        0.0006899837431845768595454845869674748595423964412436056756555508989188603311523539524878521296558226418,
        0.0005722612592947915549967446930027041289195588804541777134638979199540427102300671358290884166653833943,
        0.0004656320195944772196984034555482903695783140676151826557772629509494337281942414520762077617283745883,
    ]

    assert all(
        mp.almosteq(
            1 - _mcdf(v2, t, C_0, mp.exp(-(9.2 - beta) * t) * mp.power(10, i / 2)),
            expected_output[i],
            tol,
        )
        for i in range(len(expected_output))
    )


def test_mcdf_2():
    # case 2: lambda_1 < 0, lambda_2 > 0

    root = Subclone(node_id=0, mutation_ids=[0, 1], cell_number=100)
    v1 = Subclone(node_id=1, mutation_ids=[2], cell_number=50, parent=root)
    v2 = Subclone(node_id=2, mutation_ids=[3], cell_number=50, parent=v1)

    root.get_growth_params(None, None, beta)

    v1.growth_params = {
        "nu": 3.1 / C_0,
        "alpha": 8.5,
        "beta": beta,
        "lam": 8.5 - beta,
        "delta": 0,
        "r": 1,
        "rho": 3.1 / C_0 / 8.5,
        "phi": -beta / (8.5 - beta),
        "gamma": 0,
    }

    v2.growth_params = {
        "nu": 1e-5,
        "alpha": 9.2,
        "beta": beta,
        "lam": 9.2 - beta,
        "delta": 9.2 - beta,
        "r": 1,
        "rho": 1e-5 / 9.2,
        "phi": 9.2 / (9.2 - beta),
        "gamma": 0,
    }

    expected_output = [
        0.0002982551013232323852061365494142036114232162147212408127489585912618204300392823946428234548214619394,
        0.0002853276919176614151462789479319843854740069997938411517163701963023890096675134886769254625984735146,
        0.0002724001152653128825036550864714206146005459712548720638312815289791863429730687800133309208304602532,
        0.0002594723713642083566678484602564969779332351305542696668495203913684574929929973978110364609743937697,
        0.0002465444602127722828594541557902147604072579075756563582572600303216572509469983141568934674894406817,
        0.0002336163818107031886367821026227802619901976198607266717352433874729731820856790046699172388777804199,
        0.0002206881361617287164095843365905256397587091554498708740699509359636588984359980188671829039788146421,
        0.0002077597232823179138932967668237299208805693502642686375989786640078848563877400776201657198099313321,
        0.0001948311432292322717105623869382777112256531873502132420825471878232895411002112441592584465861115601,
        0.0001819023961866508782170547965937809147567217254881971088963227926981158469903661276118599733689300505,
        0.0001689734827416878841376245445352169957782683058233962036772918370798441967733096820175722470835181169,
        0.0001560444047556661924409846419012006560432874445641943517601190780765257642479829968422237470492410454,
        0.0001431151681193593749634759257024589358435210840087523810167364171970402529102701044896686431212834154,
        0.0001301857914659138150799498174231746989769455871992587457940383580838526416587145419236516141258628272,
        0.0001172563337235788114144807807466922298351307809174346286304877403597956900497053699411095716192211117,
    ]

    assert all(
        mp.almosteq(
            1 - _mcdf(v2, t, C_0, mp.exp(-(9.2 - beta) * t) * mp.power(10, i / 2)),
            expected_output[i],
            tol,
        )
        for i in range(len(expected_output))
    )


def test_mcdf_3():
    # case 3: 0 < lambda_1 < lambda_2

    root = Subclone(node_id=0, mutation_ids=[0, 1], cell_number=100)
    v1 = Subclone(node_id=1, mutation_ids=[2], cell_number=50, parent=root)
    v2 = Subclone(node_id=2, mutation_ids=[3], cell_number=50, parent=v1)

    root.get_growth_params(None, None, beta)

    v1.growth_params = {
        "nu": 3.1 / C_0,
        "alpha": 9.0,
        "beta": beta,
        "lam": 9.0 - beta,
        "delta": 9.0 - beta,
        "r": 1,
        "rho": 3.1 / C_0 / 9.0,
        "phi": 9.0 / (9.0 - beta),
        "gamma": 0,
    }

    v2.growth_params = {
        "nu": 1e-5,
        "alpha": 9.2,
        "beta": beta,
        "lam": 9.2 - beta,
        "delta": 9.2 - beta,
        "r": 1,
        "rho": 1e-5 / 9.2,
        "phi": 9.2 / (9.2 - beta),
        "gamma": (9.0 - beta) / (9.2 - beta),
    }

    expected_output = [
        0.7929803863520534034133003730453088255764374396647160719004663565747311385363864264471597121045075567,
        0.7481530523158793781187500364432992721930822420253227984556601448476676048190734868699030613193291479,
        0.6941513665928782626304899839468731551172833373447576042733033372809405624463881669259720282555831304,
        0.6296959403567438640795046645740424513064065256257125580753460603616026130946697452550381785910536541,
        0.5539905107051618843465849305938016386773222280927446348832888918844073681970038158474156787428594647,
        0.4674871616302384426261913990603234443634509881147795462249086209638625175812486504921208811257926054,
        0.3730739558532076266283956667078266360307879226135207201702829522110165023225118031027841093061149798,
        0.2772421430057146375164609539985922094552862425403160884952788778232731729627856899171809345847420421,
        0.189725766229169414656220396890637785430950527572781484535421926733784641228222820829477350331331858,
        0.1198433376685235097164917080306285712361043045943227910747455190653382048357182477902085882594629163,
        0.0712686182623933482299399183506470192157307887062164464546324879876993335013193112343452530052504419,
        0.04097650054174824225345524988401190568604554772734952964720270192272819146251866172945257422468678351,
        0.02322188242906347485050531042236578937597447828163978119945223087517904835646596354496853542600976528,
        0.01309181303071702610030326330262626976194387224021085120889357697442778360890760851510673569221028721,
        0.007368051035661397970422549531233755043457855313712250420051468058317113542298467579713173774715419234,
    ]

    assert all(
        mp.almosteq(
            1 - _mcdf(v2, t, C_0, mp.exp(-(9.2 - beta) * t) * mp.power(10, i / 2)),
            expected_output[i],
            tol,
        )
        for i in range(len(expected_output))
    )


def test_mcdf_4():
    # case 4: 0 < lambda_2 < lambda_1

    root = Subclone(node_id=0, mutation_ids=[0, 1], cell_number=100)
    v1 = Subclone(node_id=1, mutation_ids=[2], cell_number=50, parent=root)
    v2 = Subclone(node_id=2, mutation_ids=[3], cell_number=50, parent=v1)

    root.get_growth_params(None, None, beta)

    v1.growth_params = {
        "nu": 3.1 / C_0,
        "alpha": 9.1,
        "beta": beta,
        "lam": 9.1 - beta,
        "delta": 9.1 - beta,
        "r": 1,
        "rho": 3.1 / C_0 / 9.1,
        "phi": 9.1 / (9.1 - beta),
        "gamma": 0,
    }

    v2.growth_params = {
        "nu": 1e-5,
        "alpha": 9.0,
        "beta": beta,
        "lam": 9.0 - beta,
        "delta": 9.1 - beta,
        "r": 1,
        "rho": 1e-5 / 9.0,
        "phi": 9.0 / (9.0 - beta),
        "gamma": 1,
    }

    expected_output = [
        0.9824476111548656991303351156454653768295134116955479200755895276457231160775665610763679027972813932,
        0.9740184711068598295699635703598531463103427659554224042437193020630026929813443940215728911465769627,
        0.9615416554922450971233224153333641258306142827889127246125376938990479398186341637535430444019920113,
        0.9430743136375700969783748319224886515617845239319828759462300444906971162051297965539777035128140877,
        0.9157441500173160963277942643739308157952315734647595391122609809992698333524855212705400432136412751,
        0.875316217506068144121943301650970306218751092016196043385946367480308137813970295706544480912449802,
        0.8155998883809310174172312091851039138716111448906541629458623027121390959756890083323078243883019508,
        0.727794574354259385639503196281412248711919648760699434406562412724072219426434886269084959717863337,
        0.6005360921450534778306082153051481666818197509519146606039193770833078243203763549549556012709112519,
        0.4242699450071999196144295602095438157045741565240910179421633418836558445694819159497571162329822334,
        0.2121556131589255267768752759712820625283017014508614708772111748061736370682496528164855448410221326,
        0.0442833821471855380999439751318119722561479818579888252201229278750670066015419758966302876650580208,
        0.0007810246835566775099908687850365644551720375988953761068088687334652366055078839082271617435224220232,
        0.000000007550444847770925652907754642826536437479738117043432031611756261484688451783180680132183320613379232,
        0.000000000000000000000004462332225676209779674142209277834269716024703783753648412225322626564317292574926631867689570001708,
    ]

    assert all(
        mp.almosteq(
            1 - _mcdf(v2, t, C_0, mp.exp(-(9.1 - beta) * t) * mp.power(10, i / 2)),
            expected_output[i],
            tol,
        )
        for i in range(len(expected_output))
    )


def test_mcdf_5():
    # case 5: 0 < lambda_1 = lambda_2

    root = Subclone(node_id=0, mutation_ids=[0, 1], cell_number=100)
    v1 = Subclone(node_id=1, mutation_ids=[2], cell_number=50, parent=root)
    v2 = Subclone(node_id=2, mutation_ids=[3], cell_number=50, parent=v1)

    root.get_growth_params(None, None, beta)

    v1.growth_params = {
        "nu": 3.1 / C_0,
        "alpha": 9.1,
        "beta": beta,
        "lam": 9.1 - beta,
        "delta": 9.1 - beta,
        "r": 1,
        "rho": 3.1 / C_0 / 9.1,
        "phi": 9.1 / (9.1 - beta),
        "gamma": 0,
    }

    v2.growth_params = {
        "nu": 1e-5,
        "alpha": 9.1,
        "beta": beta,
        "lam": 9.1 - beta,
        "delta": 9.1 - beta,
        "r": 2,
        "rho": 1e-5 / 9.1,
        "phi": 9.1 / (9.1 - beta),
        "gamma": 1,
    }

    expected_output = [
        0.9904665037236614173269188478087159254611298149452381956302828401008694213675574946131925945091049934,
        0.9858882240728456970677236490918196156552254786821426628148355705898174180566937181364596726069956337,
        0.9791113337574361634968055405307677388120381300872731488759353062819956673782507437839869430956834927,
        0.9690800783749411222604766414637087969756994017662725434284347879693275327394935941957071884140527996,
        0.9542320204669767967415406435299681767206607014793068238440227881602841635512705331107612545220243744,
        0.9322559051512676587294222084475477378509503889233250663082866378570940575218142842897408053299280211,
        0.8997376261881377833739061783053008393033090211501619217486078560104008373838921699810562484716221256,
        0.8516566480682312182624253585276699057847527919061393201174470376383953380866203237093705682328477304,
        0.7807359483196300456031961653927661433162722528635729333950663011804508083244727862711622946826586201,
        0.6769190158233660712291432454912912138717453648949243395883523028075483275792418098691096345797817101,
        0.5285489610818029944228331586899205836307383698786899962422449834719347587031879403328315639507779834,
        0.3318471590158126774016036611712793959202636249906659584041684017597444621690549645405550203419238921,
        0.1246769757345868437594565207854654807130580788407597578716025357752582078810413307516401079837926566,
        0.01190952441741273160863163530262805794836597777790243177398063047897511658839395720039733336244065525,
        0.00002038690680800567171755211878057592955895050691844713511585667231654515185188909489791986247988297621,
    ]

    assert all(
        mp.almosteq(
            1 - _mcdf(v2, t, C_0, mp.exp(-(9.1 - beta) * t) / t * mp.power(10, i / 2)),
            expected_output[i],
            tol,
        )
        for i in range(len(expected_output))
    )


def test_mcdf_6():
    # case 6: 0 < lambda_1 < lambda_2 < lambda_3

    root = Subclone(node_id=0, mutation_ids=[0, 1], cell_number=100)
    v1 = Subclone(node_id=1, mutation_ids=[2], cell_number=50, parent=root)
    v2 = Subclone(node_id=2, mutation_ids=[3], cell_number=50, parent=v1)
    v3 = Subclone(node_id=3, mutation_ids=[4], cell_number=50, parent=v2)

    root.get_growth_params(None, None, beta)

    v1.growth_params = {
        "nu": 3.1 / C_0,
        "alpha": 9.0,
        "beta": beta,
        "lam": 9.0 - beta,
        "delta": 9.0 - beta,
        "r": 1,
        "rho": 3.1 / C_0 / 9.0,
        "phi": 9.0 / (9.0 - beta),
        "gamma": 0,
    }

    v2.growth_params = {
        "nu": 1e-5,
        "alpha": 9.2,
        "beta": beta,
        "lam": 9.2 - beta,
        "delta": 9.2 - beta,
        "r": 1,
        "rho": 1e-5 / 9.2,
        "phi": 9.2 / (9.2 - beta),
        "gamma": (9.0 - beta) / (9.2 - beta),
    }

    v3.growth_params = {
        "nu": 1e-5,
        "alpha": 9.4,
        "beta": beta,
        "lam": 9.4 - beta,
        "delta": 9.4 - beta,
        "r": 1,
        "rho": 1e-5 / 9.4,
        "phi": 9.4 / (9.4 - beta),
        "gamma": (9.2 - beta) / (9.4 - beta),
    }

    expected_output = [
        0.122505739257347726880359932910226874198521192869996569571459952922519007679866636152326386710039978,
        0.08889132795521180527729442297383620594181601054601736554676825360293667915939403465109968752806959202,
        0.06329892921092574302773843051884059987456291223846614035258990493324175483583896876031748725946361203,
        0.04445833020401985586848381748488253416014803516783451748502473687329120135975611963656666092204314038,
        0.0309243050779157121876583189467988205407201141101014711514039422358294679982963243942748853434566904,
        0.02136733122758316342478750810155125496870922477568303070207838592239754585978640793817919304583606649,
        0.01469704958431066003345307045731835535973244378090247806413359349007403556951309768188305554304712709,
        0.0100780213691526269878670297570912861458337010616386001402687801710727637184462045415939104156636136,
        0.006896312223123534230935159150874858802680667359729041596998161598977089495383788665102463927264784805,
        0.004712447874682058473197501566010093838854845790371385703925715289336197090612917374086911529128106798,
        0.00321707483318087421399271466077753191638622942139133934962513495860673290407555942821422709166022714,
        0.002194795076678888459647411762731378175246127518331490089830844262534968535805344741557596562639114138,
        0.001496701833835486808659711107992811104995503564764710375540692248593424698784282578989645690777286349,
        0.001020343421022787682832695198346820990948074717283835445039117384565412786042699290864409460380395069,
        0.0006954546712724728494936286616003636772989569380324776880336741985482827817111051945091412779384248592,
    ]

    assert all(
        mp.almosteq(
            1 - _mcdf(v3, t, C_0, mp.exp(-(9.4 - beta) * t) * mp.power(10, i / 2)),
            expected_output[i],
            tol,
        )
        for i in range(len(expected_output))
    )
